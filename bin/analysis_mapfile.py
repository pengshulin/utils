#!/usr/bin/env python
# analysis map file generated by gcc
# Peng Shulin <trees_peng@163.com> 2017
from subprocess import check_output
from os.path import isfile, basename
import sys
from sys import stdout
import wx
import wx.lib.agw.piectrl
from wx.lib.agw.piectrl import PieCtrl, ProgressPie, PiePart
from random import randint

MAX_LINE_LEN = 80

def writeTitle( title='', mark='=' ):
    title = unicode(title)
    line = title.join( '  ' ) if title.strip() else ''
    marks = mark + mark
    while len(line) < MAX_LINE_LEN:
        line = line.join( marks )
    print line[:MAX_LINE_LEN] + '\n'


def read_mapfile( fname ):
    #pat = '\\.(text|data|bss)  *0x[0-9a-f]{16}  *0x[0-9a-f]* .*\.o'
    pat = '\\.[a-zA-Z0-9_]+  *0x[0-9a-f]{16}  *0x[0-9a-f]* .*\.o'
    ret = check_output( ['/bin/egrep', pat, fname] )
    res = {}
    for l in ret.splitlines():
        #print l
        tp, addr, size, name = l.split()
        addr = eval(addr)
        size = eval(size)
        if size == 0 or addr == 0:
            continue
        if not res.has_key(tp):
            res[tp] = []
        res[tp].append( [addr, size, name] )
    # sort
    def sortByAddr( a, b ):
        if a[0] > b[0]: 
            return 1
        elif a[0] < b[0]:
            return -1
        return 0
    def sortBySize( a, b ):
        if a[1] > b[1]: 
            return -1
        elif a[1] < b[1]:
            return 1
        return 0

    for k in res.keys():
        res[k].sort(cmp=sortBySize)
    return res

def analysis( res ):
    for k in res.keys():
        writeTitle( k )
        for i in res[k]:
            print '0x%08x  %8d  %s'% (i[0], i[1], i[2])

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize( (800, 600) )
        self.Center()
        self.pie = PieCtrl(self, -1, wx.DefaultPosition)
        self.pie.SetAngle(90)
        self.pie.SetHeight(30)
        #self.pie.GetLegend().SetTransparent(True)
        legend = self.pie.GetLegend()
        legend.SetWindowStyle(wx.STATIC_BORDER)
        legend.SetLabelFont(wx.Font(7, wx.FONTFAMILY_DEFAULT,
                wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Sans"))
        legend.SetLabelColour(wx.Colour(0, 0, 127))  
        legend.SetBackColour(wx.Colour(147, 172, 253))  

        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(self.pie, 1, wx.EXPAND, 0)
        self.SetSizer(sizer)
        self.Layout()


    def AppendMap( self, res, section, total ):
        def sortbysize(a,b):
            return cmp(a[0], b[0])
        lst = []
        for i in res.keys(): 
            if i.startswith(section):
                for l in res[i]:
                    #print l
                    addr, size, name = l
                    lst.append( [size, name] )
        lst.sort(sortbysize, reverse=True)
        count = 0
        for size, name in lst:
            bname = basename(name)#.rstrip('.o')
            part = PiePart()
            part.SetLabel('%d %s'%(size,bname))
            part.SetValue(size)
            part.SetColour(wx.Colour(randint(0,255),randint(0,255),randint(0,255)))
            self.pie._series.append(part)
            count += size
        if total is not None:
            size = total-count
            part = PiePart()
            part.SetLabel('%d Free'%(size))
            part.SetValue(size)
            part.SetColour(wx.Colour(255,255,255))
            self.pie._series.append(part)
           
        self.pie.Update() 
        self.pie.UpdateWindowUI() 


   
 
def analysis_gui( res ):
    app = wx.App(0)
    frame = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame)
    frame.Show()
    try:
        section = sys.argv[2]
    except:
        section = '.text'
    try:
        total = int(sys.argv[3])
    except:
        total = None
    frame.SetTitle( sys.argv[1] )
    frame.AppendMap( res, section=section, total=total )
    app.MainLoop()
    

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "usage: %s mapfile"
        sys.exit(1)
    if( not isfile(sys.argv[1]) ):
        print "mapfile not exist"
        sys.exit(1)
    app_name = basename(sys.argv[0])
    if app_name == 'analysis_mapfile_gui.py':
        analysis_gui( read_mapfile(sys.argv[1]) )
    else:
        analysis( read_mapfile(sys.argv[1]) )

