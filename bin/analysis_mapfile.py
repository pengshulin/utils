#!/usr/bin/env python
# analysis map file generated by gcc
# Peng Shulin <trees_peng@163.com> 2017
from subprocess import check_output
from os.path import isfile
import sys
from sys import stdout

MAX_LINE_LEN = 80

def writeTitle( title='', mark='=' ):
    title = unicode(title)
    line = title.join( '  ' ) if title.strip() else ''
    marks = mark + mark
    while len(line) < MAX_LINE_LEN:
        line = line.join( marks )
    print line[:MAX_LINE_LEN] + '\n'


def read_mapfile( fname ):
    #pat = '\\.(text|data|bss)  *0x[0-9a-f]{16}  *0x[0-9a-f]* .*\.o'
    pat = '\\.[a-zA-Z0-9_]+  *0x[0-9a-f]{16}  *0x[0-9a-f]* .*\.o'
    ret = check_output( ['/bin/egrep', pat, fname] )
    res = {}
    for l in ret.splitlines():
        #print l
        tp, addr, size, name = l.split()
        addr = eval(addr)
        size = eval(size)
        if size == 0 or addr == 0:
            continue
        if not res.has_key(tp):
            res[tp] = []
        res[tp].append( [addr, size, name] )
    # sort
    def sortByAddr( a, b ):
        if a[0] > b[0]: 
            return 1
        elif a[0] < b[0]:
            return -1
        return 0
    def sortBySize( a, b ):
        if a[1] > b[1]: 
            return -1
        elif a[1] < b[1]:
            return 1
        return 0

    for k in res.keys():
        res[k].sort(cmp=sortBySize)
    return res

def analysis( res ):
    for k in res.keys():
        writeTitle( k )
        for i in res[k]:
            print '0x%08x  %8d  %s'% (i[0], i[1], i[2])


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "usage: %s mapfile"
        sys.exit(1)
    if( not isfile(sys.argv[1]) ):
        print "mapfile not exist"
        sys.exit(1)
    analysis( read_mapfile(sys.argv[1]) )

